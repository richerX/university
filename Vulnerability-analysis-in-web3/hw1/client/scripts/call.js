const {Web3} = require("web3");

const FILENAME = "Homework"

// Loading the contract ABI
const fs = require("fs");
const {abi} = JSON.parse(fs.readFileSync(FILENAME + ".json"));

async function get_contract() {
    // Configuring the connection to an Ethereum node
    const network = process.env.ETHEREUM_NETWORK;
    const web3 = new Web3(
        new Web3.providers.HttpProvider(
            `https://${network}.infura.io/v3/${process.env.INFURA_API_KEY}`,
        ),
    );

    // Creating a signing account from a private key
    const signer = web3.eth.accounts.privateKeyToAccount(
        "0x" + process.env.SIGNER_PRIVATE_KEY
    );
    web3.eth.accounts.wallet.add(signer);

    // Creating a Contract instance
    const contract = new web3.eth.Contract(
        abi,
        process.env.DEMO_CONTRACT,
    );

    return [network, web3, signer, contract]
}

async function use_contract_function(network, web3, signer, contract, function_name) {
    // Creating method_abi
    let method_abi;
    if (function_name === "add_user") {
        method_abi = contract.methods.add_user("", 100, true, "Name").encodeABI();
    } else if (function_name === "delete_user") {
        method_abi = contract.methods.delete_user("").encodeABI();
    }

    // Issuing a transaction
    const tx = {
        from: signer.address,
        to: contract.options.address,
        data: method_abi,
        value: '0',
        gasPrice: '100000000000',
    };
    tx.gas = await web3.eth.estimateGas(tx);
    const signedTx = await web3.eth.accounts.signTransaction(tx, signer.privateKey);
    console.log("Raw transaction data: " + (signedTx).rawTransaction);

    // Sending the transaction to the network
    const receipt = await web3.eth
        .sendSignedTransaction(signedTx.rawTransaction)
        .once("transactionHash", (txhash) => {
            console.log(`Mining transaction ...`);
            console.log(`https://${network}.etherscan.io/tx/${txhash}`);
        });

    // The transaction is now on chain
    console.log(`Mined in block ${receipt.blockNumber}`);
}

async function get_events(contract) {
    contract.getPastEvents("allEvents", {fromBlock: 1}).then(console.log);
}

async function read_storage_slot(web3, from, to) {
    for (let index = from; index < to; index++) {
        const data = await web3.eth.getStorageAt(process.env.DEMO_CONTRACT, index);
        console.log(`Значение в ${index} слоте хранилища:`, data);
    }
}

async function main() {
    const [network, web3, signer, contract] = await get_contract();
    await use_contract_function(network, web3, signer, contract, "add_user");
    await use_contract_function(network, web3, signer, contract, "delete_user");
    await get_events(contract);
    await read_storage_slot(web3, 0, 5);
}

require("dotenv").config();
main().then(_ => {
});