methods {
    function balanceOf(address) external returns (uint256);
    function totalSupply() external returns (uint256);
    function creator() external returns (address);
    function changeCreator() external;
    function allowance(address, address) external returns (uint256);
    function increaseAllowance(address, uint256) external returns (bool);
    function decreaseAllowance(address, uint256) external returns (bool);
    function approve(address, uint256) external returns (bool);
    function mint(address, uint256) external;
    function burn(address, uint256) external;
}

rule changeCreator {
    env e;
    require e.msg.sender != creator(e);

    address creator_before = creator(e);
    changeCreator(e);
    address creator_after = creator(e);

    assert creator_before == creator_after, "Only the creator can change the creator";
}

rule mint {
    env e;
    address wallet = 0x123456789ABCDEF123456789ABC3121234567891;
    require e.msg.sender != creator(e);
    require balanceOf(e, wallet) == 0;

    uint256 balance_before = balanceOf(e, wallet);
    mint(e, wallet, 100);
    uint256 balance_after = balanceOf(e, wallet);

    assert balance_before == balance_after, "Only the creator can change the emission";
}

rule increaseAllowance {
    env e;
    uint256 value = 100;
    address wallet = 0x987456789ABCDEF123456789ABC3121234565312;
    require e.msg.sender != creator(e);
    require allowance(e, e.msg.sender, wallet) == 0;

    uint256 allowance_before = allowance(e, e.msg.sender, wallet);
    increaseAllowance(e, wallet, value);
    uint256 allowance_after = allowance(e, e.msg.sender, wallet);

    assert assert_uint256(allowance_before + value) == allowance_after, "Increase allowance doesn't work";
}

rule decreaseAllowance {
    env e;
    uint256 value = 50;
    address wallet = 0x987456789ABCDEF123456789ABC3121234565312;
    require e.msg.sender != creator(e);
    require allowance(e, e.msg.sender, wallet) == 1000;

    uint256 allowance_before = allowance(e, e.msg.sender, wallet);
    decreaseAllowance(e, wallet, value);
    uint256 allowance_after = allowance(e, e.msg.sender, wallet);

    assert allowance_before == assert_uint256(allowance_after + value), "Decrease allowance doesn't work";
}

rule allowance {
    env e;
    address wallet = 0x987456789ABCDEF123456789ABC3121234565312;
    require e.msg.sender != creator(e);
    require allowance(e, e.msg.sender, wallet) == 0;

    uint256 allowance_1 = allowance(e, e.msg.sender, wallet);
    increaseAllowance(e, wallet, 1000);
    uint256 allowance_2 = allowance(e, e.msg.sender, wallet);
    assert allowance_1 != allowance_2, "Increase allowance didn't change it";

    uint256 allowance_3 = allowance(e, e.msg.sender, wallet);
    decreaseAllowance(e, wallet, 100);
    uint256 allowance_4 = allowance(e, e.msg.sender, wallet);
    assert allowance_3 != allowance_4, "Decrease allowance didn't change it";

    uint256 allowance_5 = allowance(e, e.msg.sender, wallet);
    approve(e, wallet, 35);
    uint256 allowance_6 = allowance(e, e.msg.sender, wallet);
    assert allowance_5 != allowance_6, "Approve didn't change allowance";
}

rule supply {
    env e;
    uint256 value = 100;
    address wallet = 0x987456789ABCDEF123456789ABC3121234565312;
    require e.msg.sender == creator(e);
    require totalSupply(e) == 0;

    mint(e, wallet, value);
    assert totalSupply(e) == value, "Mint didn't change total supply";

    burn(e, wallet, value);
    assert totalSupply(e) == 0, "Burn didn't change total supply";
}
